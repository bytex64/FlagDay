#!/usr/bin/perl
use YAML;
use File::Basename;
use FlagDay;
use strict;

sub find_key_for_pubkey {
	my ($keys, $pubkey) = @_;
	while (my ($k, $v) = each %$keys) {
		if ($v->{pubkey} eq $pubkey) {
			return $k;
		}
	}
	return undef;
}

my $config = YAML::LoadFile('config.yml')
	or die "Could not load config.yml\n";

my $keys = {};
my $machines = {};

print "Fetching SSH keys\n";
for my $host (@{$config->{hosts}}) {
	next unless $host->{ssh};
	my $name = $host->{name};
	print "  $name\n";
	my $machine = $machines->{$name} = {};
	$machine->{keys} = [];
	$machine->{authorized_keys} = [];
	my @l = FlagDay::ssh($name, 'ls .ssh/*.pub');
	for my $key (@l) {
		my $keyname = fileparse($key, '.pub');
		print "    $keyname...\n";
		my @keylines = FlagDay::ssh($name, qq!cat .ssh/$keyname.pub .ssh/$keyname!);
		my $key = {
			pubkey => shift @keylines,
			privkey => join("\n", @keylines),
		};
		if (exists $keys->{$keyname}) {
			# Audit to make sure it's the same 
			if ($key->{pubkey} ne $keys->{$keyname}->{pubkey}) {
				die "${name}'s '$keyname' pubkey doesn't match!";
			}
			if ($key->{privkey} ne $keys->{$keyname}->{privkey}) {
				die "$machine->{name}'s '$keyname' pubkey doesn't match!";
			}
		} else {
			$keys->{$keyname} = $key;
		}
		push @{$machine->{keys}}, $keyname;
	}
}

print "Fetching authorized keys\n";
for my $host (@{$config->{hosts}}) {
	next unless $host->{ssh};
	my $name = $host->{name};
	my $machine = $machines->{$name};
	print "  $name\n";
	my @authlines = FlagDay::ssh($name, qq!cat .ssh/authorized_keys!);
	for my $pubkey (@authlines) {
		my $keyname = find_key_for_pubkey($keys, $pubkey);
		if (!$keyname) {
			print "    No key found for pubkey on $name\n";
			print "      $pubkey\n";
		} else {
			push @{$machine->{authorized_keys}}, $keyname;
		}
	}
}

YAML::DumpFile("$ENV{FLAGDAY_INVENTORY}/ssh-machines.yml", $machines);
YAML::DumpFile("$ENV{FLAGDAY_INVENTORY}/ssh-keys.yml", $keys);
